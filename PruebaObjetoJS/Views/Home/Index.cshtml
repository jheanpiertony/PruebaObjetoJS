@{
    ViewBag.Title = "Home Page";    
}

<textarea id="editor" rows="50"></textarea>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="https://cdn.ckeditor.com/4.10.0/standard-all/ckeditor.js"></script>
    <script>
        var _objCliente = @Html.Raw(ViewBag._cliente);      
        var PLACEHOLDERS = [];

        for (var i in _objCliente) {
            if (_objCliente.hasOwnProperty(i)) {
                PLACEHOLDERS.push(_objCliente[i]);
            }
        }

        CKEDITOR.addCss('span > .cke_placeholder { background-color: #ffeec2; }');

        CKEDITOR.replace('editor', {
            plugins: 'autocomplete,textmatch,toolbar,wysiwygarea,basicstyles,undo,placeholder,justify',
            //toolbar: [
            //    { name: 'document', items: ['Undo', 'Redo'] },
            //    { name: 'basicstyles', items: ['Bold', 'Italic', 'Underline'] },
            //    { name: 'links', items: ['Link', 'Unlink'] }
            //],
            height: 340,
            removeDialogTabs: 'image:advanced;link:advanced;link:target',
            on: {
                instanceReady: function (evt) {
                    var itemTemplate = '<li data-id="{id}">' +
                        '<div><strong class="item-title">{name}</strong></div>' +
                        '<div><i>{description}</i></div>' +
                        '</li>',
                        outputTemplate = '[[{name}]]<span>&nbsp;</span>';

                    var autocomplete = new CKEDITOR.plugins.autocomplete(evt.editor, {
                        textTestCallback: textTestCallback,
                        dataCallback: dataCallback,
                        itemTemplate: itemTemplate,
                        outputTemplate: outputTemplate
                    });

                    // Override default getHtmlToInsert to enable rich content output.
                    autocomplete.getHtmlToInsert = function (item) {
                        return this.outputTemplate.output(item);
                    }
                }
            }
        });

        //CKEDITOR.instances.page_desc.getData();

        function textTestCallback(range) {
            if (!range.collapsed) {
                return null;
            }

            return CKEDITOR.plugins.textMatch.match(range, matchCallback);
        }

        function matchCallback(text, offset) {
            var pattern = /\[{2}([A-z]|\])*$/,
                match = text.slice(0, offset)
                    .match(pattern);

            if (!match) {
                return null;
            }

            return {
                start: match.index,
                end: offset
            };
        }

        function dataCallback(matchInfo, callback) {
            var data = PLACEHOLDERS.filter(function (item) {
                var itemName = '[[' + item.name.toLowerCase() + ']]';
                return itemName.indexOf(matchInfo.query.toLowerCase()) == 0;
            });

            callback(data);
        }

    </script>
}